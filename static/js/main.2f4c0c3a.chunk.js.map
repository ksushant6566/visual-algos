{"version":3,"sources":["searchingAlgorithms/Searching.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/radixSort.js","sortingAlgorithms/Sorting.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/insertionSort.js","App.js","reportWebVitals.js","index.js"],"names":["Searching","useState","mainArray","setMainArray","size","setSize","searchValue","setSearchValue","searchAlgo","setSearchAlgo","resultmsg","setResultmsg","primaryColor","secondaryColor","useEffect","getNewArray","getNewSortedArray","arr","i","item","idx","val","getNumFromInterval","push","document","getElementsByClassName","style","backgroundColor","displayResult","lo","binaryHelper","animations","bars","k","setTimeout","mid","m","j","length","Math","floor","random","console","log","getElementById","classList","remove","add","className","id","map","height","placeholder","type","value","onChange","e","target","min","max","onClick","found","linearSearch","hi","binarySearch","count","mergeSort","speed","mr","a","b","ai","bi","counter","barIdx","quickSort","pivot","pi","partition","temp","swap","radixSort","exp","countSort","freq","Array","sortedArray","Sorting","setSpeed","sortAlgo","setSortAlgo","able","setAble","items","pointerEvents","disabled","bubbleSort","tempArr","swapped","getBubbleSortAnimation","getMergeSorted","newArr","insertionSort","key","jcur","getInsertionSorted","newArray","superSpeed","getQuickSorted","getRadixSorted","App","operation","setOpertaion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2f4c0c3a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nconst Searching = () => {\r\n    \r\n    const [mainArray, setMainArray] = useState([])\r\n    const [size, setSize] = useState(30)\r\n    const [searchValue, setSearchValue] = useState(250)\r\n    const [searchAlgo, setSearchAlgo] = useState('linearSearch')\r\n    const [resultmsg, setResultmsg] = useState('')\r\n\r\n    const primaryColor = \"#074478\"\r\n    const secondaryColor = \"cyan\"\r\n\r\n    useEffect( () => {\r\n        searchAlgo === \"linearSearch\" ? getNewArray(size) : getNewSortedArray(size)\r\n    },[size])\r\n\r\n// generate new Array\r\n\r\n    const getNewArray = (size) => {\r\n        let arr = [];\r\n        for(let i=0; i < size; i++) {\r\n            const item = {\r\n                idx : i,\r\n                val : getNumFromInterval(100, 500)\r\n            }\r\n            arr.push(item)\r\n            if(document.getElementsByClassName(\"array-bar\")[i] != null ) {\r\n                document.getElementsByClassName(\"array-bar\")[i].style.backgroundColor = primaryColor\r\n            }\r\n        }\r\n        // console.log(arr)\r\n        setMainArray(arr)\r\n\r\n        displayResult(\"no-result\")\r\n    }\r\n\r\n// generate new sorted Array\r\n\r\n    const getNewSortedArray = (size) => {\r\n        let arr = [];\r\n        let lo = 100\r\n        let hi = 200\r\n        for(let i=0; i < size; i++) {\r\n            lo = getNumFromInterval(lo, hi + i * 10)\r\n            const item = {\r\n                idx : i,\r\n                val : lo\r\n            }\r\n            arr.push(item)\r\n            if(document.getElementsByClassName(\"array-bar\")[i] != null ) {\r\n                document.getElementsByClassName(\"array-bar\")[i].style.backgroundColor = primaryColor\r\n            }\r\n        }\r\n        // console.log(arr)\r\n        setMainArray(arr)\r\n        \r\n        displayResult(\"no-result\")\r\n    }\r\n\r\n// LINEAR SEARCH\r\n\r\n    const linearSearch = (value) => {\r\n        let found = false;\r\n        for(let i = 0; i < size; i++) {\r\n            if(value == mainArray[i].val) {\r\n                setTimeout(() => {\r\n                    document.getElementsByClassName(\"array-bar\")[i].style.backgroundColor = \"#107834\"\r\n                    displayResult(i)\r\n                }, i * 100)\r\n                \r\n                found = true;\r\n                return\r\n            }else {\r\n                setTimeout(() => {\r\n                    document.getElementsByClassName(\"array-bar\")[i].style.backgroundColor = secondaryColor\r\n                }, i * 100)\r\n                setTimeout(() => {\r\n                    document.getElementsByClassName(\"array-bar\")[i].style.backgroundColor = primaryColor\r\n                }, (i + 5) * 100)\r\n            }\r\n        }\r\n        if(found === false) {\r\n            setTimeout(() => {\r\n                displayResult(-1)\r\n            }, (size) * 100);\r\n        }\r\n    }\r\n\r\n// BINARY SEARCH\r\n\r\n    const binarySearch = (value) => {\r\n        \r\n        let lo = 0;\r\n        let hi = size-1;\r\n        let animations = [];\r\n        let found = false;\r\n\r\n        while(lo <= hi) {\r\n            let mid = Math.floor((lo + hi)/2);\r\n\r\n            animations.push({\r\n                i : lo,\r\n                j : hi,\r\n                mid : mid\r\n            })\r\n\r\n            if(mainArray[mid].val == value) {\r\n                found = true\r\n                break;\r\n            } else if(mainArray[mid].val > value ) {\r\n                hi = mid - 1;\r\n            }else {\r\n                lo = mid + 1;\r\n            }\r\n        }\r\n        \r\n        if(!found) {\r\n            animations.push({\r\n                i : -1,\r\n                j : -1,\r\n                mid : -1\r\n            })\r\n        }\r\n\r\n        // console.log(animations)\r\n        binaryHelper(animations)\r\n\r\n    }\r\n\r\n    const binaryHelper = (animations) => {\r\n        let bars = document.getElementsByClassName(\"array-bar\")\r\n        \r\n\r\n        for(let k = 0; k < animations.length; k++) {\r\n            if(animations[k].i == -1){\r\n                setTimeout(() => {\r\n                    \r\n                    displayResult(-1)\r\n\r\n                    bars[animations[k-1].mid].style.backgroundColor =  'grey';\r\n                }, k * 1000)\r\n                break;\r\n            }\r\n\r\n            if( mainArray[animations[k].mid].val == searchValue) {\r\n                \r\n                setTimeout(() => {\r\n                    bars[animations[k].mid].style.backgroundColor =  '#107834';\r\n\r\n                    displayResult(animations[k].mid)\r\n\r\n                }, (k+1) * 1000)\r\n            }\r\n\r\n            setTimeout(() => {\r\n\r\n                for(let m = 0; m < size; m++) {\r\n                    \r\n                    \r\n                    if(m <= animations[k].j && m >= animations[k].i) bars[m].style.backgroundColor =  primaryColor;\r\n\r\n                    else bars[m].style.backgroundColor =  'grey';\r\n\r\n                    if(m == animations[k].mid) bars[m].style.backgroundColor =  secondaryColor;\r\n\r\n                }\r\n                \r\n            },k * 1000);\r\n            \r\n        }\r\n    }\r\n\r\n    const getNumFromInterval = (i, j) => {\r\n        return i + Math.floor(Math.random() * (j-i))\r\n    }\r\n\r\n//  HANDLE SELECT CHANGE\r\n    useEffect(() => {\r\n        // console.log(searchAlgo)\r\n        searchAlgo === 'binarySearch' ? getNewSortedArray(size) : getNewArray(size)\r\n    }, [searchAlgo] )\r\n\r\n// SHOW RESULT\r\n    const displayResult = (idx) => {\r\n        console.log(\"called\")\r\n\r\n        if(idx === \"no-result\") {\r\n            setResultmsg(\"\")\r\n            document.getElementById(\"result-box\").classList.remove(\"red\", \"green\")\r\n        }\r\n\r\n        else if(idx === -1) {\r\n            // setResultmsg()\r\n            setResultmsg(`not found !!!`)\r\n            document.getElementById(\"result-box\").classList.remove(\"red\", \"green\")\r\n            document.getElementById(\"result-box\").classList.add(\"red\")\r\n        }else {\r\n            setResultmsg(`found at idx ${idx}`)\r\n            document.getElementById(\"result-box\").classList.remove(\"red\", \"green\")\r\n            document.getElementById(\"result-box\").classList.add(\"green\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"searching-container\">\r\n            <div className=\"array-container\">\r\n                <div id=\"result-box\" className=\"result-box\" >\r\n                    {resultmsg}\r\n                </div>\r\n\r\n                {mainArray.map(item => {\r\n                    return (\r\n                        <div className=\"array-bar\" key ={item.idx} style={{height : item.val, backgroundColor : primaryColor}} > <p>{item.val}</p> </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"utility-container\">\r\n            <label>Search Element</label>\r\n                <input\r\n                    placeholder=\"try \"\r\n                    type = \"number\"\r\n                    value = {searchValue}\r\n                    onChange = {(e) => setSearchValue(e.target.value)}\r\n                >\r\n                </input>\r\n\r\n                <div style = {{height:\"10px\"}} ></div>\r\n                \r\n                <label>Length of Array</label>\r\n                <input\r\n                    className=\"input-range\"\r\n                    type = \"range\"\r\n                    value = {size}\r\n                    onChange = {(e) => setSize(e.target.value)}\r\n                    min = \"15\"\r\n                    max = \"34\"\r\n                >\r\n                </input>\r\n\r\n                <select className=\"select\" value={searchAlgo} onChange = {(e) => {setSearchAlgo(e.target.value)}}>\r\n                    \r\n                    <option value=\"linearSearch\">linearSearch</option>\r\n\r\n                    <option value=\"binarySearch\">binarySearch</option>\r\n\r\n                </select>\r\n\r\n                <div className=\"btn\" onClick = {() => searchAlgo === 'linearSearch' ? getNewArray(size) : getNewSortedArray(size)}> reset array </div>\r\n                <div className=\"btn\" onClick = {() => searchAlgo === 'linearSearch' ? linearSearch(searchValue) : binarySearch(searchValue)}> search </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Searching","var count = 0;\r\nexport const getMergeSorted = (tempArr, speed) => {\r\n\r\n    let arr = tempArr.map(item => item.val)\r\n    count = 0;\r\n    let sortedArray = mergeSort(0, arr.length-1, arr, speed)\r\n    \r\n    return {sortedArray, count};\r\n}\r\n\r\nconst mergeSort = (lo, hi, arr, speed)  => {\r\n    \r\n    if(lo > hi) {\r\n        let mr = []\r\n        return mr;\r\n    }\r\n\r\n    if(lo === hi) {\r\n        let mr = []\r\n        mr.push(arr[lo])\r\n        return mr;\r\n    }\r\n    \r\n    let mid = Math.floor((lo + hi)/2)\r\n\r\n    let a = mergeSort(lo, mid, arr, speed)\r\n    let b = mergeSort(mid+1, hi, arr, speed)\r\n    let mr = []\r\n    let k = lo;\r\n    let bars = document.getElementsByClassName('sorting-array-bar')\r\n\r\n    let ai = 0, bi = 0;\r\n    while(ai < a.length && bi < b.length) {\r\n\r\n        let counter = count\r\n        let barIdx = k\r\n\r\n        if(a[ai] < b[bi]) {\r\n            mr.push(a[ai]);\r\n\r\n            let i = ai\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'cyan'\r\n                bars[barIdx].style.height = `${a[i]}px`\r\n                \r\n            } , (counter) * speed)\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'red'\r\n            } , (counter+1) * speed)\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = '#074478'\r\n            } , (counter+1.5) * speed)\r\n\r\n            ai++;\r\n        }\r\n        else {\r\n            mr.push(b[bi]);\r\n\r\n            let i = bi\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'cyan'\r\n                bars[barIdx].style.height = `${b[i]}px`\r\n                \r\n            } , (counter) * speed)\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'red'\r\n            } , (counter+1) * speed)\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = '#074478'\r\n            } , (counter+1.5) * speed)\r\n\r\n            bi++;\r\n        }\r\n        k++;\r\n        count++\r\n    }\r\n\r\n    if(ai === a.length) {\r\n        \r\n        while(bi < b.length) {\r\n            mr.push(b[bi]);\r\n            let i = bi;\r\n            let barIdx = k;\r\n            let counter = count\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'cyan'\r\n                bars[barIdx].style.height = `${b[i]}px`\r\n    \r\n            } , (counter) * speed)\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'red'\r\n            } , (counter+1) * speed)\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = '#074478'\r\n            } , (counter+1.5) * speed)\r\n\r\n            k++;\r\n            bi++;\r\n            count++;\r\n        }\r\n    }else if(bi === b.length) {\r\n        \r\n        for(let i = ai ; i < a.length; i++) {\r\n            mr.push(a[i]);\r\n            let barIdx = k;\r\n            let counter = count\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'cyan'\r\n                bars[barIdx].style.height = `${a[i]}px`\r\n                \r\n            } , (counter) * speed)\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'red'\r\n            } , (counter+1) * speed)\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = '#074478'\r\n            } , (counter+1.5) * speed)\r\n\r\n            k++;\r\n            count++;\r\n        }\r\n    }\r\n\r\n    return mr\r\n}\r\n\r\n\r\n\r\n// for(let i = 0; i < arr.length-1; i++) {\r\n//     let swapped = false;\r\n//     for(let j = 0; j < arr.length-i-1; j++) {\r\n//         let swap = false;\r\n//         if(arr[j] > arr[j+1]) {\r\n//             swapped = true;\r\n//             swap = true;\r\n\r\n//             let temp = arr[j]\r\n//             arr[j] = arr[j+1]\r\n//             arr[j+1] = temp\r\n\r\n//         }\r\n//         animations.push({\r\n//             i : j,\r\n//             j : j+1,\r\n//             swap : swap\r\n//         })\r\n//     }\r\n\r\n//     if(swapped === false) break;\r\n// }\r\n\r\n","var counter = 0;\r\nvar speed = 0;\r\nexport const getQuickSorted = (mainArray, superSpeed) => {\r\n\r\n    const sortedArray = mainArray.map(item => item.val);\r\n\r\n    counter = 0;\r\n    speed = superSpeed\r\n    quickSort(sortedArray, 0, sortedArray.length-1)\r\n    counter+=5\r\n\r\n    return { sortedArray, counter }\r\n}\r\n\r\nconst quickSort = (arr, lo, hi) => {\r\n\r\n    if(lo > hi ) return \r\n\r\n    let pivot = arr[hi]\r\n    \r\n    setTimeout(() => {\r\n        document.getElementsByClassName('sorting-array-bar')[hi].style.backgroundColor = 'cyan'\r\n    }, (counter++) * speed);\r\n    \r\n    let pi = partition(arr, pivot, lo, hi)\r\n\r\n    setTimeout(() => {\r\n        document.getElementsByClassName('sorting-array-bar')[pi].style.backgroundColor = 'green'\r\n    }, (counter++) * speed);\r\n\r\n    quickSort(arr, lo, pi-1)\r\n    quickSort(arr, pi+1, hi)\r\n}\r\n\r\nconst partition = (arr, pivot, lo, hi) => {\r\n    let i = lo\r\n    let j = lo\r\n\r\n    while(i <= hi) {\r\n        let a = i\r\n        let b = j\r\n\r\n        setTimeout(() => {\r\n            document.getElementsByClassName('sorting-array-bar')[a].style.backgroundColor = 'cyan'\r\n        }, (counter++) * speed);\r\n\r\n        \r\n        if(arr[i] > pivot) {\r\n            setTimeout(() => {\r\n                document.getElementsByClassName('sorting-array-bar')[a].style.backgroundColor = '#074478'\r\n            }, (counter++) * speed);\r\n\r\n            i++\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                document.getElementsByClassName('sorting-array-bar')[a].style.backgroundColor = 'red'\r\n                document.getElementsByClassName('sorting-array-bar')[b].style.backgroundColor = 'red'\r\n\r\n                let temp = document.getElementsByClassName('sorting-array-bar')[a].style.height\r\n\r\n                document.getElementsByClassName('sorting-array-bar')[a].style.height = document.getElementsByClassName('sorting-array-bar')[b].style.height\r\n                document.getElementsByClassName('sorting-array-bar')[b].style.height = temp              \r\n\r\n            }, (counter++) * speed);            \r\n\r\n            setTimeout(() => {\r\n                document.getElementsByClassName('sorting-array-bar')[a].style.backgroundColor = '#074478'\r\n                document.getElementsByClassName('sorting-array-bar')[b].style.backgroundColor = '#074478'\r\n            }, (counter++) * speed);\r\n\r\n            swap(arr, i, j)\r\n            i++\r\n            j++\r\n        }\r\n\r\n    }\r\n    return j-1\r\n}\r\n\r\nconst swap = (arr, i, j) => {\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}","var counter = 0;\r\nvar speed = 0;\r\nexport const getRadixSorted = (mainArray, superSpeed) => {\r\n    const sortedArray = mainArray.map(item => item.val)\r\n\r\n    counter = 0;\r\n    speed = superSpeed;\r\n    radixSort(sortedArray);\r\n    counter += 10;\r\n    return { sortedArray, counter }\r\n} \r\n\r\nconst radixSort = (arr) => {\r\n    let max = -1;\r\n    for(let i = 0; i < arr.length; i++) {\r\n        max = Math.max(max, arr[i]);\r\n    }\r\n\r\n    for(let exp = 1; Math.floor(max/exp) > 0; exp*= 10) {\r\n        countSort(arr, exp)\r\n    }\r\n\r\n    console.log(arr)\r\n}\r\n\r\nconst countSort = (arr, exp) => {\r\n\r\n    const freq = new Array(10);\r\n    let sortedArray = new Array(arr.length);\r\n\r\n    for(let i=0; i<freq.length; i++) freq[i] = 0;\r\n    for(let i=0; i<sortedArray.length; i++) sortedArray[i] = 0;\r\n\r\n\r\n    for(let i=0; i < arr.length; i++) {\r\n        \r\n        freq[ (Math.floor((arr[i] / exp) % 10)) % 10 ]++ ;\r\n    }\r\n\r\n    freq[0]--;\r\n    for(let i=1; i < freq.length; i++) {\r\n        freq[i] += freq[i-1];\r\n    }\r\n\r\n\r\n    for(let i = arr.length-1; i >= 0; i--) {\r\n\r\n        let idx = (freq[Math.floor((arr[i] / exp) % 10)]);\r\n        sortedArray[idx] = arr[i];\r\n        \r\n        let height = arr[i]\r\n        setTimeout(() => {\r\n            let bars = document.getElementsByClassName('sorting-array-bar');\r\n            bars[idx].style.height = `${height}px`\r\n            bars[idx].style.backgroundColor = 'red'\r\n            \r\n        }, (counter++)*speed);\r\n\r\n        setTimeout(() => {\r\n            let bars = document.getElementsByClassName('sorting-array-bar');\r\n            bars[i].style.backgroundColor = 'cyan'\r\n            \r\n        }, (counter++)*speed);\r\n\r\n        setTimeout(() => {\r\n            let bars = document.getElementsByClassName('sorting-array-bar');\r\n            bars[idx].style.backgroundColor = '#074478'\r\n            bars[i].style.backgroundColor = '#074478'\r\n            \r\n        }, (counter++)*speed);\r\n\r\n        freq[Math.floor((arr[i] / exp) % 10)]--;\r\n    }\r\n\r\n\r\n\r\n    for(let i = 0; i < arr.length; i++) {\r\n        arr[i] = sortedArray[i];\r\n    }\r\n\r\n    return sortedArray\r\n\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { getBubbleSortAnimation } from './bubbleSort'\r\nimport { getMergeSorted } from './mergeSort'\r\nimport { getInsertionSorted } from './insertionSort'\r\nimport { getQuickSorted } from './quickSort'\r\nimport { getRadixSorted } from './radixSort'\r\n\r\nconst Sorting = () => {\r\n\r\n    const [mainArray, setMainArray] = useState([])\r\n    const [size, setSize] = useState(100)\r\n    const [speed, setSpeed] = useState(30)\r\n    const [sortAlgo, setSortAlgo] = useState('bubbleSort')\r\n    const [able, setAble] = useState(true)\r\n\r\n    const primaryColor = \"#074478\"\r\n    const secondaryColor = \"cyan\"\r\n    const thirdColor = \"red\"\r\n\r\n    useEffect( () => {\r\n        if(able) {\r\n            getNewArray(size)\r\n        }\r\n    },[size, sortAlgo])\r\n\r\n// ABLE / DISABLE BUTTONS ETC.\r\n\r\n    useEffect(() => {\r\n        const items = document.getElementsByClassName('able');\r\n\r\n        if(!able) {\r\n            for(let i=0; i < items.length; i++) {\r\n                items[i].style.pointerEvents = 'none';\r\n                items[i].disabled = true;\r\n\r\n                // items[i].style.backgroundColor = 'grey';\r\n            }\r\n        }else {\r\n            for(let i=0; i < items.length; i++) {\r\n                items[i].style.pointerEvents = 'auto';\r\n                items[i].disabled = false;\r\n            }\r\n        }\r\n    }, [able])\r\n\r\n    const sort =() => {\r\n        if(able) {\r\n            if(sortAlgo === 'bubbleSort') bubbleSort()\r\n            else if(sortAlgo === 'mergeSort') mergeSort()\r\n            else if(sortAlgo === 'insertionSort') insertionSort()\r\n            else if(sortAlgo === 'quickSort') quickSort()\r\n            else if (sortAlgo === 'radixSort') radixSort()\r\n        }\r\n    }\r\n\r\n    const getNewArray = (size) => {\r\n        let arr = [];\r\n        for(let i=0; i < size; i++) {\r\n            const item = {\r\n                idx : i,\r\n                val : getNumFromInterval(100, 500)\r\n            }\r\n            arr.push(item)\r\n            if(document.getElementsByClassName(\"sorting-array-bar\")[i] != null ) {\r\n                document.getElementsByClassName(\"sorting-array-bar\")[i].style.backgroundColor = primaryColor\r\n            }\r\n        }\r\n        \r\n        if(able)\r\n        setMainArray(arr)\r\n\r\n    }\r\n\r\n// BUBBLE SORT\r\n\r\n    const bubbleSort = () => {\r\n        const {animations, arr} = getBubbleSortAnimation(mainArray)\r\n        const bars = document.getElementsByClassName(\"sorting-array-bar\")\r\n\r\n        setAble(false)\r\n\r\n        let m = 0;\r\n        for(let k = 0; k < animations.length; k++) {\r\n            let i = animations[k].i\r\n            let j = animations[k].j\r\n\r\n            setTimeout(() => {\r\n                bars[i].style.backgroundColor = secondaryColor\r\n                bars[j].style.backgroundColor = secondaryColor\r\n                \r\n            }, m * speed)\r\n            \r\n            if(animations[k].swap) {\r\n                setTimeout(() => {\r\n                    bars[i].style.backgroundColor = thirdColor\r\n                    bars[j].style.backgroundColor = thirdColor\r\n                    \r\n                    let temp = bars[i].style.height\r\n                    bars[i].style.height = bars[j].style.height\r\n                    bars[j].style.height = temp\r\n\r\n                }, (m+1) * speed)\r\n                m ++\r\n            }\r\n\r\n            setTimeout(() => {\r\n                bars[i].style.backgroundColor = primaryColor\r\n                bars[j].style.backgroundColor = primaryColor\r\n\r\n            }, (m+1) * speed)\r\n            m++\r\n        }\r\n\r\n        setTimeout(() => {\r\n            let sortedArray = []\r\n            for(let i = 0; i < size; i++) {\r\n                bars[i].style.backgroundColor = 'purple'\r\n                sortedArray.push({\r\n                    idx : i,\r\n                    val : arr[i]\r\n                })\r\n            }\r\n            setMainArray(sortedArray)\r\n            setAble(true)\r\n\r\n        }, (m+1) * speed)\r\n\r\n    }\r\n\r\n// MERGE SORT\r\n\r\n    const mergeSort = () => {\r\n        setAble(false)\r\n        let { sortedArray, count } = getMergeSorted(mainArray, speed)\r\n\r\n        const newArr = []\r\n        for(let i = 0; i < size; i++) {\r\n            newArr.push({\r\n                idx : i,\r\n                val : sortedArray[i]\r\n            })\r\n        }\r\n\r\n        setTimeout(() => {\r\n            setMainArray(newArr)\r\n            \r\n            for(let i = 0; i < size; i++) {\r\n                document.getElementsByClassName('sorting-array-bar')[i].style.backgroundColor = 'purple'\r\n            }\r\n            setAble(true)\r\n        }, (count+10) * speed);\r\n\r\n    }\r\n\r\n// INSERTION SORT\r\n\r\n    const insertionSort = () => {\r\n        setAble(false)\r\n        const { arr, counter } = getInsertionSorted(mainArray, speed)\r\n        let newArray = [];\r\n\r\n        for(let i =0; i < size; i++) newArray.push({ idx: i,val: arr[i] })\r\n\r\n            setTimeout(() => {\r\n                setMainArray(newArray)\r\n\r\n                for(let i = 0; i < size; i++) {\r\n                    document.getElementsByClassName('sorting-array-bar')[i].style.backgroundColor = 'purple'\r\n                }\r\n                setAble(true)\r\n            }, counter * speed);\r\n    }\r\n\r\n// QUICK SORT\r\n\r\n    const quickSort = () => {\r\n        setAble(false)\r\n        const { sortedArray, counter } = getQuickSorted(mainArray, speed)\r\n\r\n        let newArray = []\r\n        for(let i =0; i < size; i++) newArray.push({ idx: i,val: sortedArray[i] })\r\n\r\n        setTimeout(() => {\r\n            setMainArray(newArray)\r\n\r\n            for(let i = 0; i < size; i++) {\r\n                document.getElementsByClassName('sorting-array-bar')[i].style.backgroundColor = 'purple'\r\n            }\r\n            setAble(true)\r\n        }, counter * speed);\r\n\r\n    }\r\n\r\n// RADIX SORT\r\n\r\n    const radixSort = () => {\r\n        setAble(false)\r\n        const { sortedArray, counter } = getRadixSorted(mainArray, speed)\r\n\r\n        let newArray = []\r\n        for(let i =0; i < size; i++) newArray.push({ idx: i,val: sortedArray[i] })\r\n\r\n        setTimeout(() => {\r\n            setMainArray(newArray)\r\n\r\n            for(let i = 0; i < size; i++) {\r\n                document.getElementsByClassName('sorting-array-bar')[i].style.backgroundColor = 'purple'\r\n            }\r\n            setAble(true)\r\n        }, counter * speed);\r\n    }\r\n\r\n\r\n// GET RANDOM NUMBER FROM A GIVEN INTERVAL\r\n    const getNumFromInterval = (i, j) => {\r\n        return i + Math.floor(Math.random() * (j-i))\r\n    }\r\n\r\n    return (\r\n        <div className=\"sorting-container\" >\r\n            <div className=\"array-container\">\r\n\r\n                {\r\n                    mainArray.map(item => {\r\n                    return (\r\n                        <div \r\n                        className=\"sorting-array-bar\" \r\n                        key ={item.idx} \r\n                        style={{\r\n                            height : item.val, \r\n                            backgroundColor : primaryColor\r\n                        }} \r\n                        ></div>\r\n                    )\r\n                })}\r\n\r\n            </div>\r\n\r\n            <div className=\"utility-container\">\r\n                \r\n                <label>Length of Array</label>\r\n                <input\r\n                    className=\"input-range able\"\r\n                    type = \"range\"\r\n                    value = {size}\r\n                    onChange = {(e) => setSize(e.target.value)}\r\n                    min = \"5\"\r\n                    max = \"300\"\r\n                >\r\n                </input>\r\n\r\n                <label>Speed</label>\r\n                <input\r\n                    className=\"input-range able\"\r\n                    type = \"range\"\r\n                    value = {500 - speed}\r\n                    onChange = {(e) => setSpeed(500 - e.target.value)}\r\n                    min = \"350\"\r\n                    max = \"499.5\"\r\n                >\r\n                </input>\r\n\r\n                <select className=\"select able\" value={sortAlgo} onChange = {(e) => {setSortAlgo(e.target.value)}}>\r\n                    \r\n                    <option value=\"bubbleSort\">bubbleSort</option>\r\n\r\n                    <option value=\"quickSort\">quickSort</option>\r\n\r\n                    <option value=\"mergeSort\">mergeSort</option>\r\n\r\n                    <option value=\"radixSort\">radixSort</option>\r\n\r\n                    <option value=\"insertionSort\">insertionSort</option>\r\n\r\n                </select>\r\n\r\n                <div className=\"btn able\" onClick = {() => getNewArray(size)}> reset array </div>\r\n                <div className=\"btn able\" onClick = {() => sort()}> sort </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sorting","export const getBubbleSortAnimation = (tempArr) => {\r\n    const arr = tempArr.map(item => item.val)\r\n    let animations = [];\r\n    \r\n    for(let i = 0; i < arr.length-1; i++) {\r\n        let swapped = false;\r\n        for(let j = 0; j < arr.length-i-1; j++) {\r\n            let swap = false;\r\n            if(arr[j] > arr[j+1]) {\r\n                swapped = true;\r\n                swap = true;\r\n\r\n                let temp = arr[j]\r\n                arr[j] = arr[j+1]\r\n                arr[j+1] = temp\r\n\r\n            }\r\n            animations.push({\r\n                i : j,\r\n                j : j+1,\r\n                swap : swap\r\n            })\r\n        }\r\n\r\n        if(swapped === false) break;\r\n    }\r\n\r\n    \r\n    return { animations , arr }\r\n}\r\n","export const getInsertionSorted = (mainArray, speed) => {\r\n\r\n    let arr = mainArray.map(item => item.val);\r\n\r\n    let bars = document.getElementsByClassName('sorting-array-bar');\r\n\r\n    let counter = 0;\r\n    for(let i = 1; i < arr.length; i++) {\r\n        let key = arr[i];\r\n        setTimeout(() => {\r\n            bars[i].style.backgroundColor = 'cyan'\r\n        }, (counter++) * speed);\r\n        counter+= 1;\r\n        let j = i-1;\r\n\r\n        while( j >= 0 && arr[j] > key) {\r\n            let jcur = j;\r\n\r\n            setTimeout(() => {\r\n                bars[jcur+1].style.backgroundColor = 'red'\r\n                bars[jcur+1].style.height = bars[jcur].style.height\r\n\r\n            }, (counter++) * speed);\r\n            setTimeout(() => {\r\n                bars[jcur+1].style.backgroundColor = '#074478'\r\n\r\n            }, (counter) * speed);\r\n\r\n            arr[j+1] = arr[j]\r\n            j--\r\n        }\r\n\r\n        setTimeout(() => {\r\n            bars[j+1].style.backgroundColor = 'cyan'\r\n            bars[j+1].style.height = `${key}px`\r\n\r\n        }, (counter++) * speed);\r\n\r\n        setTimeout(() => {\r\n            bars[j+1].style.backgroundColor = '#074478'\r\n        }, (counter+3) * speed);\r\n        \r\n\r\n        arr[j+1] = key;\r\n    }\r\n    counter+= 5\r\n\r\n    return { arr , counter}\r\n\r\n}","import Searching from './searchingAlgorithms/Searching'\nimport Sorting from './sortingAlgorithms/Sorting'\nimport './App.css';\nimport { useState , useEffect} from 'react';\n\n\nfunction App() {\n\n  const [operation, setOpertaion] = useState('sorting')\n\n  useEffect(() => {\n    if(operation === 'sorting') {\n      document.getElementsByClassName('navbtn1')[0].style.backgroundColor = 'grey'\n      document.getElementsByClassName('navbtn2')[0].style.backgroundColor = ' rgb(255, 85, 241)'\n    }else {\n      document.getElementsByClassName('navbtn2')[0].style.backgroundColor = 'grey'\n      document.getElementsByClassName('navbtn1')[0].style.backgroundColor = ' rgb(255, 85, 241)'\n    }\n  }, [operation])\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"navbar\">\n        <div onClick={() => setOpertaion('searching')} className=\"btn  navbtn navbtn1\" >searching</div>\n        <div onClick={() => setOpertaion('sorting')} className=\"btn  navbtn navbtn2\" >sorting</div>\n      </div>\n\n      {operation === 'searching' ? <Searching /> : <Sorting />}\n      \n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}