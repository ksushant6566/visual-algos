{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/Sorting.js","sortingAlgorithms/bubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["count","mergeSort","lo","hi","arr","speed","mr","push","mid","Math","floor","a","b","k","bars","document","getElementsByClassName","ai","bi","counter","barIdx","i","setTimeout","style","backgroundColor","height","length","Sorting","useState","mainArray","setMainArray","size","setSize","setSpeed","sortAlgo","setSortAlgo","primaryColor","secondaryColor","useEffect","getNewArray","item","idx","val","getNumFromInterval","bubbleSort","tempArr","map","animations","swapped","j","swap","temp","getBubbleSortAnimation","m","sortedArray","getMergeSortAnimation","newArr","random","className","type","value","onChange","e","target","min","max","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4230b14d.chunk.js","sourcesContent":["var count = 0;\r\nexport const getMergeSortAnimation = (tempArr, speed) => {\r\n\r\n    let arr = tempArr.map(item => item.val)\r\n    count = 0;\r\n    let sortedArray = mergeSort(0, arr.length-1, arr, speed)\r\n    \r\n    return {sortedArray, count};\r\n}\r\n\r\nconst mergeSort = (lo, hi, arr, speed)  => {\r\n    \r\n    if(lo > hi) {\r\n        let mr = []\r\n        return mr;\r\n    }\r\n\r\n    if(lo === hi) {\r\n        let mr = []\r\n        mr.push(arr[lo])\r\n        return mr;\r\n    }\r\n    \r\n    let mid = Math.floor((lo + hi)/2)\r\n\r\n    let a = mergeSort(lo, mid, arr, speed)\r\n    let b = mergeSort(mid+1, hi, arr, speed)\r\n    let mr = []\r\n    let k = lo;\r\n    let bars = document.getElementsByClassName('sorting-array-bar')\r\n\r\n    let ai = 0, bi = 0;\r\n    while(ai < a.length && bi < b.length) {\r\n\r\n        let counter = count\r\n        let barIdx = k\r\n\r\n        if(a[ai] < b[bi]) {\r\n            mr.push(a[ai]);\r\n\r\n            let i = ai\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'cyan'\r\n                bars[barIdx].style.height = `${a[i]}px`\r\n                \r\n            } , (counter) * speed)\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'red'\r\n            } , (counter+1) * speed)\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = '#074478'\r\n            } , (counter+1.5) * speed)\r\n\r\n            ai++;\r\n        }\r\n        else {\r\n            mr.push(b[bi]);\r\n\r\n            let i = bi\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'cyan'\r\n                bars[barIdx].style.height = `${b[i]}px`\r\n                \r\n            } , (counter) * speed)\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'red'\r\n            } , (counter+1) * speed)\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = '#074478'\r\n            } , (counter+1.5) * speed)\r\n\r\n            bi++;\r\n        }\r\n        k++;\r\n        count++\r\n    }\r\n\r\n    if(ai === a.length) {\r\n        \r\n        while(bi < b.length) {\r\n            mr.push(b[bi]);\r\n            let i = bi;\r\n            let barIdx = k;\r\n            let counter = count\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'cyan'\r\n                bars[barIdx].style.height = `${b[i]}px`\r\n    \r\n            } , (counter) * speed)\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'red'\r\n            } , (counter+1) * speed)\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = '#074478'\r\n            } , (counter+1.5) * speed)\r\n\r\n            k++;\r\n            bi++;\r\n            count++;\r\n        }\r\n    }else if(bi === b.length) {\r\n        \r\n        for(let i = ai ; i < a.length; i++) {\r\n            mr.push(a[i]);\r\n            let barIdx = k;\r\n            let counter = count\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'cyan'\r\n                bars[barIdx].style.height = `${a[i]}px`\r\n                \r\n            } , (counter) * speed)\r\n\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = 'red'\r\n            } , (counter+1) * speed)\r\n            setTimeout(() => {\r\n                bars[barIdx].style.backgroundColor = '#074478'\r\n            } , (counter+1.5) * speed)\r\n\r\n            k++;\r\n            count++;\r\n        }\r\n    }\r\n\r\n    return mr\r\n}\r\n\r\n\r\n\r\n// for(let i = 0; i < arr.length-1; i++) {\r\n//     let swapped = false;\r\n//     for(let j = 0; j < arr.length-i-1; j++) {\r\n//         let swap = false;\r\n//         if(arr[j] > arr[j+1]) {\r\n//             swapped = true;\r\n//             swap = true;\r\n\r\n//             let temp = arr[j]\r\n//             arr[j] = arr[j+1]\r\n//             arr[j+1] = temp\r\n\r\n//         }\r\n//         animations.push({\r\n//             i : j,\r\n//             j : j+1,\r\n//             swap : swap\r\n//         })\r\n//     }\r\n\r\n//     if(swapped === false) break;\r\n// }\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport { getBubbleSortAnimation } from './bubbleSort'\r\nimport { getMergeSortAnimation } from './mergeSort'\r\n\r\nconst Sorting = () => {\r\n\r\n    const [mainArray, setMainArray] = useState([])\r\n    const [size, setSize] = useState(30)\r\n    const [speed, setSpeed] = useState(30)\r\n    const [sortAlgo, setSortAlgo] = useState('bubbleSort')\r\n\r\n    const primaryColor = \"#074478\"\r\n    const secondaryColor = \"cyan\"\r\n    const thirdColor = \"red\"\r\n\r\n    useEffect( () => {\r\n        getNewArray(size)\r\n    },[size, sortAlgo])\r\n\r\n    const sort =() => {\r\n        if(sortAlgo === 'bubbleSort') bubbleSort()\r\n        else if(sortAlgo === 'mergeSort') mergeSort()\r\n    }\r\n\r\n    const getNewArray = (size) => {\r\n        let arr = [];\r\n        for(let i=0; i < size; i++) {\r\n            const item = {\r\n                idx : i,\r\n                val : getNumFromInterval(100, 500)\r\n            }\r\n            arr.push(item)\r\n            if(document.getElementsByClassName(\"sorting-array-bar\")[i] != null ) {\r\n                document.getElementsByClassName(\"sorting-array-bar\")[i].style.backgroundColor = primaryColor\r\n            }\r\n        }\r\n        // console.log(arr)\r\n        setMainArray(arr)\r\n\r\n    }\r\n\r\n    const bubbleSort = () => {\r\n        const {animations, arr} = getBubbleSortAnimation(mainArray)\r\n        const bars = document.getElementsByClassName(\"sorting-array-bar\")\r\n        let m = 0;\r\n        for(let k = 0; k < animations.length; k++) {\r\n            let i = animations[k].i\r\n            let j = animations[k].j\r\n\r\n            setTimeout(() => {\r\n                bars[i].style.backgroundColor = secondaryColor\r\n                bars[j].style.backgroundColor = secondaryColor\r\n                \r\n            }, m * speed)\r\n            \r\n            if(animations[k].swap) {\r\n                setTimeout(() => {\r\n                    bars[i].style.backgroundColor = thirdColor\r\n                    bars[j].style.backgroundColor = thirdColor\r\n                    \r\n                    let temp = bars[i].style.height\r\n                    bars[i].style.height = bars[j].style.height\r\n                    bars[j].style.height = temp\r\n\r\n                }, (m+1) * speed)\r\n                m ++\r\n            }\r\n\r\n            setTimeout(() => {\r\n                bars[i].style.backgroundColor = primaryColor\r\n                bars[j].style.backgroundColor = primaryColor\r\n\r\n            }, (m+1) * speed)\r\n            m++\r\n        }\r\n\r\n        setTimeout(() => {\r\n            let sortedArray = []\r\n            for(let i = 0; i < size; i++) {\r\n                bars[i].style.backgroundColor = 'purple'\r\n                sortedArray.push({\r\n                    idx : i,\r\n                    val : arr[i]\r\n                })\r\n            }\r\n            setMainArray(sortedArray)\r\n\r\n        }, (m+1) * speed)\r\n\r\n    }\r\n\r\n    const mergeSort = () => {\r\n        let { sortedArray, count } = getMergeSortAnimation(mainArray, speed)\r\n\r\n\r\n        const newArr = []\r\n        for(let i = 0; i < size; i++) {\r\n            newArr.push({\r\n                idx : i,\r\n                val : sortedArray[i]\r\n            })\r\n        }\r\n\r\n        setTimeout(() => {\r\n            setMainArray(newArr)\r\n            \r\n            for(let i = 0; i < size; i++) {\r\n                document.getElementsByClassName('sorting-array-bar')[i].style.backgroundColor = 'purple'\r\n            }\r\n        }, (count+10) * speed);\r\n\r\n    }\r\n\r\n    const getNumFromInterval = (i, j) => {\r\n        return i + Math.floor(Math.random() * (j-i))\r\n    }\r\n\r\n    return (\r\n        <div className=\"sorting-container\" >\r\n            <div className=\"array-container\">\r\n\r\n                {\r\n                    mainArray.map(item => {\r\n                    return (\r\n                        <div \r\n                        className=\"sorting-array-bar\" \r\n                        key ={item.idx} \r\n                        style={{\r\n                            height : item.val, \r\n                            backgroundColor : primaryColor\r\n                        }} \r\n                        ></div>\r\n                    )\r\n                })}\r\n\r\n            </div>\r\n\r\n            <div className=\"utility-container\">\r\n                \r\n                <label>Length of Array</label>\r\n                <input\r\n                    className=\"input-range\"\r\n                    type = \"range\"\r\n                    value = {size}\r\n                    onChange = {(e) => setSize(e.target.value)}\r\n                    min = \"5\"\r\n                    max = \"100\"\r\n                >\r\n                </input>\r\n\r\n                <label>Speed</label>\r\n                <input\r\n                    className=\"input-range\"\r\n                    type = \"range\"\r\n                    value = {500 - speed}\r\n                    onChange = {(e) => setSpeed(500 - e.target.value)}\r\n                    min = \"350\"\r\n                    max = \"499.5\"\r\n                >\r\n                </input>\r\n\r\n                <select className=\"select\" value={sortAlgo} onChange = {(e) => {setSortAlgo(e.target.value)}}>\r\n                    \r\n                    <option value=\"bubbleSort\">bubbleSort</option>\r\n\r\n                    <option value=\"quickSort\">quickSort</option>\r\n\r\n                    <option value=\"mergeSort\">mergeSort</option>\r\n\r\n                    <option value=\"radixSort\">radixSort</option>\r\n\r\n                    <option value=\"shellSort\">shellSort</option>\r\n\r\n                    <option value=\"insertionSort\">insertionSort</option>\r\n\r\n                </select>\r\n\r\n                <div className=\"btn\" onClick = {() => getNewArray(size)}> reset array </div>\r\n                <div className=\"btn\" onClick = {() => sort()}> sort </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sorting","export const getBubbleSortAnimation = (tempArr) => {\r\n    const arr = tempArr.map(item => item.val)\r\n    let animations = [];\r\n    \r\n    for(let i = 0; i < arr.length-1; i++) {\r\n        let swapped = false;\r\n        for(let j = 0; j < arr.length-i-1; j++) {\r\n            let swap = false;\r\n            if(arr[j] > arr[j+1]) {\r\n                swapped = true;\r\n                swap = true;\r\n\r\n                let temp = arr[j]\r\n                arr[j] = arr[j+1]\r\n                arr[j+1] = temp\r\n\r\n            }\r\n            animations.push({\r\n                i : j,\r\n                j : j+1,\r\n                swap : swap\r\n            })\r\n        }\r\n\r\n        if(swapped === false) break;\r\n    }\r\n\r\n    \r\n    return { animations , arr }\r\n}\r\n","import Searching from './searchingAlgorithms/Searching'\nimport Sorting from './sortingAlgorithms/Sorting'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Searching /> */}\n      <Sorting />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}